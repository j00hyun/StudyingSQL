ALTER SESSION SET STATISTICS_LEVEL = ALL;

CREATE TABLE PRACTICE.SSAK3 (
	NO				NUMBER(1),
	TITLE 			VARCHAR2(100),
	COUNT_DT		VARCHAR(8),
	DOWNLOAD_CNT 	NUMBER(4)
);

INSERT INTO PRACTICE.SSAK3 VALUES (1, '다시 여기 바닷가', '20200801', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (2, '그 여름을 틀어줘', '20200801', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (3, '여름 안에서 by 싹쓰리(Feat.황광희)', '20200801', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (4, 'LINDA(Feat.윤미래)', '20200801', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (5, '두리쥬와(Feat.S.B.N)', '20200801', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (6, '신난다(Feat.마마무)', '20200801', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (7, '다시 여기 바닷가(Acoustic Ver.)', '20200801', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (1, '다시 여기 바닷가', '20200802', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (2, '그 여름을 틀어줘', '20200802', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (3, '여름 안에서 by 싹쓰리(Feat.황광희)', '20200802', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (4, 'LINDA(Feat.윤미래)', '20200802', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (5, '두리쥬와(Feat.S.B.N)', '20200802', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (6, '신난다(Feat.마마무)', '20200802', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (7, '다시 여기 바닷가(Acoustic Ver.)', '20200802', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (1, '다시 여기 바닷가', '20200803', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (2, '그 여름을 틀어줘', '20200803', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (3, '여름 안에서 by 싹쓰리(Feat.황광희)', '20200803', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (4, 'LINDA(Feat.윤미래)', '20200803', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (5, '두리쥬와(Feat.S.B.N)', '20200803', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (6, '신난다(Feat.마마무)', '20200803', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));
INSERT INTO PRACTICE.SSAK3 VALUES (7, '다시 여기 바닷가(Acoustic Ver.)', '20200803', ROUND(DBMS_RANDOM.VALUE(100, 1000),0));

SELECT * FROM PRACTICE.SSAK3;

-- 음반 별 누적된 다운로드 값 출력
--      1. 같은 테이블을 범위 조건으로 조인
SELECT A.NO, MAX(A.TITLE) TITLE, A.COUNT_DT, MAX(A.DOWNLOAD_CNT) DOWNLOAD_CNT, SUM(B.DOWNLOAD_CNT) "누적값"
  FROM PRACTICE.SSAK3 A, PRACTICE.SSAK3 B
 WHERE A.NO = B.NO
   AND A.COUNT_DT >= B.COUNT_DT -- ex. A:8/1 -> B:8/1, A:8/1 -> B:8/1+8/2
 GROUP BY A.NO, A.COUNT_DT
 ORDER BY A.NO, A.COUNT_DT;
 
--      2. 분석 함수 사용: 한번만 테이블에 접근하므로 1번보다 성능에 유리
SELECT NO, TITLE, COUNT_DT, DOWNLOAD_CNT,
       SUM(DOWNLOAD_CNT) OVER( -- 윈도우 함수를 사용해 다운로드 수를 합침
            PARTITION BY NO -- NO끼리 같은 것을 묶어 그룹 별로 따로 계산 (NO=1끼리 따로, NO=2끼리 따로 계산)
            ORDER BY COUNT_DT -- 날짜 순으로 정렬하여 누적 계산
            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW -- UNBOUNDED PRECEDING:맨 처음 행부터 시작, CURRENT ROW:현재 행까지 계산
       ) "누적값",
       SUM(DOWNLOAD_CNT) OVER( -- 윈도우 함수를 사용해 다운로드 수를 합침
            PARTITION BY NO -- NO끼리 같은 것을 묶어 그룹 별로 따로 계산 (NO=1끼리 따로, NO=2끼리 따로 계산)
            ORDER BY COUNT_DT -- 날짜 순으로 정렬하여 누적 계산
            ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING -- CURRENT ROW:현재 행부터 시작, UNBOUNDED FOLLOWING: 맨 마지막 행까지 계산
       ) "거꾸로 누적값" 
  FROM PRACTICE.SSAK3;
   
-- 실행 계획 출력
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY_CURSOR(NULL, NULL, 'ALLSTATS LAST -ROWS'));