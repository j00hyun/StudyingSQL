-- 1. CREATE
CREATE TABLE NETFLIX ( -- 테이블 생성
	
	VIDEO_NAME		VARCHAR2(50),
	CATEGORY		VARCHAR2(30),
	VIEW_CNT		NUMBER(7),
	REG_DATE		DATE
	
);

SELECT * FROM NETFLIX;

-- 2. ALTER
ALTER TABLE NETFLIX ADD (CAST_MEMBER VARCHAR2(20)); -- 새로운 컬럼 추가 

ALTER TABLE NETFLIX MODIFY (CAST_MEMBER VARCHAR2(50)); -- 컬럼 크기 변경 

ALTER TABLE NETFLIX MODIFY (CAST_MEMBER NUMBER(2)); -- 컬럼 데이터 타입 변경 

ALTER TABLE NETFLIX DROP (CAST_MEMBER); -- 컬럼 삭제

-- 3. DROP / TRUNCATE
CREATE TABLE CODELION ( -- 테스트 테이블 생성

	COL1	VARCHAR2(3),
	COL2	VARCHAR2(3)

);

SELECT * FROM CODELION;

INSERT INTO CODELION VALUES ('AAA', 'BBB');
INSERT INTO CODELION VALUES ('CCC', 'DDD');

COMMIT;
 
DROP TABLE CODELION; -- 데이터와 테이블 모두 삭제

TRUNCATE TABLE CODELION; -- 데이터만 삭제 후 빈 테이블 유지

-- 4. INSERT
SELECT * FROM NETFLIX n;

INSERT INTO NETFLIX VALUES ('나의 아저씨', '드라마', 50, SYSDATE);

COMMIT; -- INSERT 는 작업 후 커밋을 해줘야 완전하게 데이터가 삽입됨 

INSERT INTO NETFLIX (VIDEO_NAME, VIEW_CNT) VALUES ('시그널', 42);

ROLLBACK; -- COMMIT 안한 INSERT 작업들 취소 

INSERT INTO NETFLIX VALUES ('응답하라 1988', '드라마', 35, SYSDATE-30);

INSERT INTO NETFLIX VALUES ('이태원 클라쓰', '드라마', 30, SYSDATE-40);
INSERT INTO NETFLIX VALUES ('미스터 선샤인', '드라마', 22, SYSDATE-300);

-- 5. UPDATE
SELECT * FROM NETFLIX n;

UPDATE NETFLIX SET VIEW_CNT = 70 WHERE VIDEO_NAME = '나의 아저씨'; -- WHERE 조건문이 없으면 모든 컬럼 값 변경됨

COMMIT;

UPDATE NETFLIX SET CATEGORY = '드라마', REG_DATE = TO_DATE('20210101', 'YYYYMMDD') WHERE VIDEO_NAME = '시그널';

ROLLBACK;

-- 6. DELETE
-- 		TRUNCATE 와의 차이점
-- 		1. TRUNCATE는 모든 데이터를 없애고, DELETE는 원하는 데이터만 삭제 가능 
--		2. TRUNCATE는 한번 실행하면 되돌릴 수 없지만, DELETE는 ROLLBACK을 이용해 되돌릴 수 있음
-- 		3. 모든 데이터를 삭제하는 경우엔 TRUNCATE가 더 빠름
SELECT * FROM NETFLIX n;

DELETE FROM NETFLIX n WHERE VIDEO_NAME = '미스터 선샤인';

COMMIT;

DELETE FROM NETFLIX n WHERE CATEGORY = '드라마' AND VIEW_CNT < 35;

ROLLBACK;

DELETE FROM NETFLIX WHERE VIDEO_NAME IN ('시그널', '나의 아저씨');

DELETE FROM NETFLIX; -- TRUNCATE TABLE NETFLIX 와 동일

-- 7. SELECT
SELECT * FROM NETFLIX n;

SELECT VIDEO_NAME, CATEGORY FROM NETFLIX n;

SELECT * FROM NETFLIX WHERE VIDEO_NAME = '나의 아저씨';

SELECT * FROM NETFLIX WHERE VIDEO_NAME <> '나의 아저씨'; -- 이름이 '나의 아저씨'가 아닌 데이터

SELECT * FROM NETFLIX WHERE VIEW_CNT = 70;

SELECT * FROM NETFLIX WHERE REG_DATE > SYSDATE-30; -- 등록일이 최근 한달 이내인 데이터

SELECT DISTINCT CATEGORY FROM NETFLIX; -- 5개의 '드라마' 컬럼이 하나만 출력

-- 8. WHERE
INSERT INTO NETFLIX VALUES ('진격의 거인','애니메이션', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('도라에몽','애니메이션', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('천공의 성 라퓨타','애니메이션', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('귀를 기울이면','애니메이션', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('모노노케 히메','애니메이션', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('하트시그널','예능', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('연애의 참견','예능', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('효리네 민박','예능', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('미스트롯','예능', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('아는 형님','예능', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('리틀 포레스트','영화', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('건축학개론','영화', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('인터스텔라','영화', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('광해','영화', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('어바웃타임','영화', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('우리의 지구','다큐', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('인사이드 빌게이츠','다큐', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('길 위의 셰프들','다큐', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('죽어도 선덜랜드','다큐', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));
INSERT INTO NETFLIX VALUES ('별나라 동물들','다큐', ROUND(DBMS_RANDOM.VALUE(0, 100)), SYSDATE-ROUND(DBMS_RANDOM.VALUE(0, 100)));

COMMIT;

SELECT * FROM NETFLIX WHERE CATEGORY = '애니메이션';

SELECT * FROM NETFLIX WHERE CATEGORY IN ('애니메이션', '영화'); -- 애니메이션과 영화들만 출력

SELECT * FROM NETFLIX WHERE CATEGORY NOT IN ('애니메이션', '영화'); -- 애니메이션과 영화 이외의 데이터들 출력

SELECT * FROM NETFLIX WHERE VIEW_CNT < 70;

SELECT * FROM NETFLIX WHERE VIEW_CNT <= 70;

SELECT * FROM NETFLIX WHERE REG_DATE < TO_DATE('20240101', 'YYYYMMDD');

SELECT * FROM NETFLIX WHERE CATEGORY = '애니메이션' AND VIEW_CNT < 70;

SELECT * FROM NETFLIX WHERE CATEGORY = '애니메이션' AND REG_DATE < TO_DATE('20250401', 'YYYYMMDD');

SELECT * FROM NETFLIX WHERE CATEGORY = '애니메이션' OR VIEW_CNT < 70;

SELECT * FROM NETFLIX WHERE CATEGORY = '애니메이션' OR CATEGORY = '영화'; -- SELECT * FROM NETFLIX WHERE CATEGORY IN ('애니메이션', '영화'); 와 동일

SELECT * FROM NETFLIX WHERE VIDEO_NAME LIKE '미%'; -- 제목이 '미'로 시작하는 데이터

SELECT * FROM NETFLIX WHERE VIDEO_NAME LIKE '%인'; -- 제목이 '인'으로 끝나는 데이터 

SELECT * FROM NETFLIX WHERE VIDEO_NAME LIKE '%의%'; -- 제목에 '의'가 들어가는 데이터

SELECT * FROM NETFLIX WHERE VIEW_CNT >= 60 AND VIEW_CNT <= 70;

SELECT * FROM NETFLIX WHERE VIEW_CNT BETWEEN 60 AND 70; -- 위와 동일한 쿼리 

-- 9. ORDER BY
SELECT * FROM NETFLIX ORDER BY REG_DATE; -- 디폴드: 오름차순

SELECT * FROM NETFLIX ORDER BY REG_DATE DESC;

SELECT * FROM NETFLIX ORDER BY VIDEO_NAME; -- 제목 가나다 순 배열

SELECT * FROM NETFLIX ORDER BY CATEGORY;

SELECT * FROM NETFLIX ORDER BY VIEW_CNT DESC; -- 인기순 정렬

SELECT * FROM NETFLIX ORDER BY CATEGORY DESC, VIEW_CNT DESC;

-- 10. GROUP BY
SELECT CATEGORY, COUNT(*) FROM NETFLIX GROUP BY CATEGORY; -- 카테고리 별 데이터 수 

SELECT CATEGORY, SUM(VIEW_CNT) FROM NETFLIX GROUP BY CATEGORY; -- 카테고리 별 조회수 합계 

SELECT CATEGORY, MAX(VIEW_CNT) FROM NETFLIX GROUP BY CATEGORY; -- 카테고리 별 조회수 가장 많은 것

SELECT CATEGORY, MAX(VIEW_CNT) FROM NETFLIX GROUP BY CATEGORY ORDER BY MAX(VIEW_CNT) DESC; -- 값이 가장 큰 것 부터 표시

SELECT CATEGORY, MIN(VIEW_CNT) FROM NETFLIX GROUP BY CATEGORY; -- 카테고리 별 조회수 가장 적은 것

SELECT CATEGORY, MAX(VIEW_CNT), MIN(VIEW_CNT) FROM NETFLIX GROUP BY CATEGORY; -- 카테고리 별 조회수 가장 많은 것과 가장 적은 것 표시

SELECT CATEGORY, AVG(VIEW_CNT) FROM NETFLIX GROUP BY CATEGORY; -- 카테고리 별 조회수 평균

-- 11. INNER JOIN
--		두 테이블에 공통적으로 들어가 있는 데이터만 출력
CREATE TABLE NETFLIX_CAST (

	VIDEO_NAME		VARCHAR2(50),
	CAST_MEMBER		VARCHAR2(30),
	BIRTHDAY		DATE,
	GENDER			VARCHAR2(10)

);

INSERT INTO NETFLIX_CAST VALUES ('나의 아저씨', '이지은', TO_DATE('19930516', 'YYYYMMDD'), '여');
INSERT INTO NETFLIX_CAST VALUES ('효리네 민박', '이효리', TO_DATE('19790510', 'YYYYMMDD'), '여');
INSERT INTO NETFLIX_CAST VALUES ('이태원 클라쓰', '박서준', TO_DATE('19881216', 'YYYYMMDD'), '남');
INSERT INTO NETFLIX_CAST VALUES ('시그널', '조진웅', TO_DATE('19760303', 'YYYYMMDD'), '남');
INSERT INTO NETFLIX_CAST VALUES ('기생충', '송강호', TO_DATE('19670117', 'YYYYMMDD'), '남');
INSERT INTO NETFLIX_CAST VALUES ('미생', '임시완', TO_DATE('19881201', 'YYYYMMDD'), '남');
INSERT INTO NETFLIX_CAST VALUES ('승리호', '김태리', TO_DATE('19900424', 'YYYYMMDD'), '여');

COMMIT;

SELECT * FROM NETFLIX_CAST;

SELECT A.VIDEO_NAME, A.CATEGORY, B.CAST_MEMBER, B.BIRTHDAY
  FROM NETFLIX A, NETFLIX_CAST B
 WHERE A.VIDEO_NAME = B.VIDEO_NAME;

INSERT INTO NETFLIX_CAST VALUES ('효리네 민박', '이상순', TO_DATE('19740825', 'YYYYMMDD'), '남');

-- 12. OUTER JOIN
SELECT A.VIDEO_NAME, A.CATEGORY, B.CAST_MEMBER, B.BIRTHDAY
  FROM NETFLIX A
  LEFT OUTER JOIN NETFLIX_CAST B
    ON A.VIDEO_NAME = B.VIDEO_NAME;

SELECT A.VIDEO_NAME, A.CATEGORY, B.CAST_MEMBER, B.BIRTHDAY
  FROM NETFLIX A
  LEFT OUTER JOIN NETFLIX_CAST B
    ON A.VIDEO_NAME = B.VIDEO_NAME
 WHERE B.CAST_MEMBER IS NOT NULL; -- INNER JOIN과 동일한 결과 출력
 
-- 13. Date function
SELECT SYSDATE FROM DUAL; -- 현재 날짜 (DUAL: 시스템에서 제공하는 더미 테이블)

SELECT ADD_MONTHS(SYSDATE, 3) FROM DUAL; -- 오늘 날짜에서 3달 후 출력
SELECT ADD_MONTHS(SYSDATE, -3) FROM DUAL; -- 오늘 날짜에서 3달 전 출력

SELECT TRUNC(SYSDATE) FROM DUAL; -- 시간 정보 없이 날짜만 출력

SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') FROM DUAL; -- 날짜 시간 포맷 변경

-- 14. REPLACE
SELECT REPLACE('코드라이언', '코드', 'CODE') FROM DUAL; -- CODE라이언

SELECT REPLACE('코드라이언', '코드') FROM DUAL; -- 라이언

SELECT REPLACE('010-1234-5678', '-') FROM DUAL; -- 01012345678

SELECT
'안녕하세요
코드라이언입니다.'
FROM DUAL;

SELECT REPLACE('안녕하세요
코드라이언입니다.', CHR(10), ' ') FROM DUAL; -- 안녕하세요 코드라이언입니다.

SELECT * FROM NETFLIX_CAST;
SELECT REPLACE(CAST_MEMBER, '이지은', '아이유') FROM NETFLIX_CAST;

-- 15. SUBSTR
SELECT SUBSTR('코드라이언', 3, 2) FROM DUAL; -- 3번째 자리부터 2글자를 가져옴 (라이)

SELECT SUBSTR('코드라이언', 3) FROM DUAL; -- 3번째 자리부터 문자 끝까지 가져옴 (라이언)

SELECT SUBSTR('코드라이언', -4, 3) FROM DUAL; -- 드라이

SELECT SUBSTR('코드라이언', -4) FROM DUAL; -- 드라이언

SELECT * FROM NETFLIX_CAST;

SELECT SUBSTR(CAST_MEMBER, 1, 1) || '*' || SUBSTR(CAST_MEMBER, 3) FROM NETFLIX_CAST; -- 이지은 -> 이*은 으로 표시됨

SELECT SUBSTR('미국 캘리포니아에 본사를 둔 우주개발 회사 오비탈 어셈블리가 2027년 세계 최초로 우주 호텔을 가동할 계획이라고 IT매체 BGR이 8일 보도했다.', 1, 20) || '.......' FROM DUAL; -- 미국 캘리포니아에 본사를 둔 우주개발.......

-- 16. UPPER / LOWER
SELECT UPPER('CodeLion') FROM DUAL; -- CODELION

SELECT LOWER('CodeLion') FROM DUAL; -- codelion

-- 17. 숫자 함수
SELECT ROUND(3.16) FROM DUAL; -- 반올림 3
SELECT ROUND(3.67) FROM DUAL; -- 반올림 4
SELECT ROUND(3.16, 1) FROM DUAL; -- 반올림해서 소수점 한자리까지 표시 3.2

SELECT TRUNC(3.16) FROM DUAL; -- 버림 3
SELECT TRUNC(3.67) FROM DUAL; -- 버림 3
SELECT TRUNC(3.16, 1) FROM DUAL; -- 버림해서 소수점 한자리까지 표시 3.1

SELECT CEIL(3.16) FROM DUAL; -- 올림 4
SELECT CEIL(3.67) FROM DUAL; -- 올림 4
SELECT CEIL(-3.16) FROM DUAL; -- 올림 -3







